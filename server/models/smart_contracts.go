// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// SmartContract is an object representing the database table.
type SmartContract struct {
	ID                int64           `boil:"id" json:"id" toml:"id" yaml:"id"`
	PayPerViewEventID int64           `boil:"pay_per_view_event_id" json:"payPerViewEventID" toml:"payPerViewEventID" yaml:"payPerViewEventID"`
	Address           string          `boil:"address" json:"address" toml:"address" yaml:"address"`
	R                 *smartContractR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L                 smartContractL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SmartContractColumns = struct {
	ID                string
	PayPerViewEventID string
	Address           string
}{
	ID:                "id",
	PayPerViewEventID: "pay_per_view_event_id",
	Address:           "address",
}

// SmartContractRels is where relationship names are stored.
var SmartContractRels = struct {
	PayPerViewEvent     string
	SmartContractEvents string
}{
	PayPerViewEvent:     "PayPerViewEvent",
	SmartContractEvents: "SmartContractEvents",
}

// smartContractR is where relationships are stored.
type smartContractR struct {
	PayPerViewEvent     *PayPerViewEvent
	SmartContractEvents SmartContractEventSlice
}

// NewStruct creates a new relationship struct
func (*smartContractR) NewStruct() *smartContractR {
	return &smartContractR{}
}

// smartContractL is where Load methods for each relationship are stored.
type smartContractL struct{}

var (
	smartContractColumns               = []string{"id", "pay_per_view_event_id", "address"}
	smartContractColumnsWithoutDefault = []string{"pay_per_view_event_id", "address"}
	smartContractColumnsWithDefault    = []string{"id"}
	smartContractPrimaryKeyColumns     = []string{"id"}
)

type (
	// SmartContractSlice is an alias for a slice of pointers to SmartContract.
	// This should generally be used opposed to []SmartContract.
	SmartContractSlice []*SmartContract

	smartContractQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	smartContractType                 = reflect.TypeOf(&SmartContract{})
	smartContractMapping              = queries.MakeStructMapping(smartContractType)
	smartContractPrimaryKeyMapping, _ = queries.BindMapping(smartContractType, smartContractMapping, smartContractPrimaryKeyColumns)
	smartContractInsertCacheMut       sync.RWMutex
	smartContractInsertCache          = make(map[string]insertCache)
	smartContractUpdateCacheMut       sync.RWMutex
	smartContractUpdateCache          = make(map[string]updateCache)
	smartContractUpsertCacheMut       sync.RWMutex
	smartContractUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

// One returns a single smartContract record from the query.
func (q smartContractQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SmartContract, error) {
	o := &SmartContract{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for smart_contracts")
	}

	return o, nil
}

// All returns all SmartContract records from the query.
func (q smartContractQuery) All(ctx context.Context, exec boil.ContextExecutor) (SmartContractSlice, error) {
	var o []*SmartContract

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SmartContract slice")
	}

	return o, nil
}

// Count returns the count of all SmartContract records in the query.
func (q smartContractQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count smart_contracts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q smartContractQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if smart_contracts exists")
	}

	return count > 0, nil
}

// PayPerViewEvent pointed to by the foreign key.
func (o *SmartContract) PayPerViewEvent(mods ...qm.QueryMod) payPerViewEventQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.PayPerViewEventID),
	}

	queryMods = append(queryMods, mods...)

	query := PayPerViewEvents(queryMods...)
	queries.SetFrom(query.Query, "\"pay_per_view_events\"")

	return query
}

// SmartContractEvents retrieves all the smart_contract_event's SmartContractEvents with an executor.
func (o *SmartContract) SmartContractEvents(mods ...qm.QueryMod) smartContractEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"smart_contract_events\".\"smart_contract_id\"=?", o.ID),
	)

	query := SmartContractEvents(queryMods...)
	queries.SetFrom(query.Query, "\"smart_contract_events\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"smart_contract_events\".*"})
	}

	return query
}

// LoadPayPerViewEvent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (smartContractL) LoadPayPerViewEvent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSmartContract interface{}, mods queries.Applicator) error {
	var slice []*SmartContract
	var object *SmartContract

	if singular {
		object = maybeSmartContract.(*SmartContract)
	} else {
		slice = *maybeSmartContract.(*[]*SmartContract)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &smartContractR{}
		}
		args = append(args, object.PayPerViewEventID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &smartContractR{}
			}

			for _, a := range args {
				if a == obj.PayPerViewEventID {
					continue Outer
				}
			}

			args = append(args, obj.PayPerViewEventID)

		}
	}

	query := NewQuery(qm.From(`pay_per_view_events`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PayPerViewEvent")
	}

	var resultSlice []*PayPerViewEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PayPerViewEvent")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for pay_per_view_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pay_per_view_events")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PayPerViewEvent = foreign
		if foreign.R == nil {
			foreign.R = &payPerViewEventR{}
		}
		foreign.R.SmartContracts = append(foreign.R.SmartContracts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PayPerViewEventID == foreign.ID {
				local.R.PayPerViewEvent = foreign
				if foreign.R == nil {
					foreign.R = &payPerViewEventR{}
				}
				foreign.R.SmartContracts = append(foreign.R.SmartContracts, local)
				break
			}
		}
	}

	return nil
}

// LoadSmartContractEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (smartContractL) LoadSmartContractEvents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSmartContract interface{}, mods queries.Applicator) error {
	var slice []*SmartContract
	var object *SmartContract

	if singular {
		object = maybeSmartContract.(*SmartContract)
	} else {
		slice = *maybeSmartContract.(*[]*SmartContract)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &smartContractR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &smartContractR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`smart_contract_events`), qm.WhereIn(`smart_contract_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load smart_contract_events")
	}

	var resultSlice []*SmartContractEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice smart_contract_events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on smart_contract_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for smart_contract_events")
	}

	if singular {
		object.R.SmartContractEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &smartContractEventR{}
			}
			foreign.R.SmartContract = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SmartContractID {
				local.R.SmartContractEvents = append(local.R.SmartContractEvents, foreign)
				if foreign.R == nil {
					foreign.R = &smartContractEventR{}
				}
				foreign.R.SmartContract = local
				break
			}
		}
	}

	return nil
}

// SetPayPerViewEvent of the smartContract to the related item.
// Sets o.R.PayPerViewEvent to related.
// Adds o to related.R.SmartContracts.
func (o *SmartContract) SetPayPerViewEvent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PayPerViewEvent) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"smart_contracts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"pay_per_view_event_id"}),
		strmangle.WhereClause("\"", "\"", 2, smartContractPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PayPerViewEventID = related.ID
	if o.R == nil {
		o.R = &smartContractR{
			PayPerViewEvent: related,
		}
	} else {
		o.R.PayPerViewEvent = related
	}

	if related.R == nil {
		related.R = &payPerViewEventR{
			SmartContracts: SmartContractSlice{o},
		}
	} else {
		related.R.SmartContracts = append(related.R.SmartContracts, o)
	}

	return nil
}

// AddSmartContractEvents adds the given related objects to the existing relationships
// of the smart_contract, optionally inserting them as new records.
// Appends related to o.R.SmartContractEvents.
// Sets related.R.SmartContract appropriately.
func (o *SmartContract) AddSmartContractEvents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SmartContractEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SmartContractID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"smart_contract_events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"smart_contract_id"}),
				strmangle.WhereClause("\"", "\"", 2, smartContractEventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SmartContractID = o.ID
		}
	}

	if o.R == nil {
		o.R = &smartContractR{
			SmartContractEvents: related,
		}
	} else {
		o.R.SmartContractEvents = append(o.R.SmartContractEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &smartContractEventR{
				SmartContract: o,
			}
		} else {
			rel.R.SmartContract = o
		}
	}
	return nil
}

// SmartContracts retrieves all the records using an executor.
func SmartContracts(mods ...qm.QueryMod) smartContractQuery {
	mods = append(mods, qm.From("\"smart_contracts\""))
	return smartContractQuery{NewQuery(mods...)}
}

// FindSmartContract retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSmartContract(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*SmartContract, error) {
	smartContractObj := &SmartContract{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"smart_contracts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, smartContractObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from smart_contracts")
	}

	return smartContractObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SmartContract) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no smart_contracts provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(smartContractColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	smartContractInsertCacheMut.RLock()
	cache, cached := smartContractInsertCache[key]
	smartContractInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			smartContractColumns,
			smartContractColumnsWithDefault,
			smartContractColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(smartContractType, smartContractMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(smartContractType, smartContractMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"smart_contracts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"smart_contracts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into smart_contracts")
	}

	if !cached {
		smartContractInsertCacheMut.Lock()
		smartContractInsertCache[key] = cache
		smartContractInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the SmartContract.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SmartContract) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	smartContractUpdateCacheMut.RLock()
	cache, cached := smartContractUpdateCache[key]
	smartContractUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			smartContractColumns,
			smartContractPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update smart_contracts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"smart_contracts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, smartContractPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(smartContractType, smartContractMapping, append(wl, smartContractPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update smart_contracts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for smart_contracts")
	}

	if !cached {
		smartContractUpdateCacheMut.Lock()
		smartContractUpdateCache[key] = cache
		smartContractUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q smartContractQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for smart_contracts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for smart_contracts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SmartContractSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), smartContractPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"smart_contracts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, smartContractPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in smartContract slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all smartContract")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SmartContract) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no smart_contracts provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(smartContractColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	smartContractUpsertCacheMut.RLock()
	cache, cached := smartContractUpsertCache[key]
	smartContractUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			smartContractColumns,
			smartContractColumnsWithDefault,
			smartContractColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			smartContractColumns,
			smartContractPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert smart_contracts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(smartContractPrimaryKeyColumns))
			copy(conflict, smartContractPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"smart_contracts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(smartContractType, smartContractMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(smartContractType, smartContractMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert smart_contracts")
	}

	if !cached {
		smartContractUpsertCacheMut.Lock()
		smartContractUpsertCache[key] = cache
		smartContractUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single SmartContract record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SmartContract) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SmartContract provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), smartContractPrimaryKeyMapping)
	sql := "DELETE FROM \"smart_contracts\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from smart_contracts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for smart_contracts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q smartContractQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no smartContractQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from smart_contracts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for smart_contracts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SmartContractSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SmartContract slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), smartContractPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"smart_contracts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, smartContractPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from smartContract slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for smart_contracts")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SmartContract) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSmartContract(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SmartContractSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SmartContractSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), smartContractPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"smart_contracts\".* FROM \"smart_contracts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, smartContractPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SmartContractSlice")
	}

	*o = slice

	return nil
}

// SmartContractExists checks if the SmartContract row exists.
func SmartContractExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"smart_contracts\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if smart_contracts exists")
	}

	return exists, nil
}
